---
import type { ComponentProps } from "astro/types";
import type { CollectionEntry } from "astro:content";

import { getEntry } from "astro:content";

import type { GameData } from "../../content-utils";

import * as ContentUtils from "../../content-utils";
import * as Utils from "../../utils";
import TeamSeasonPaceChart from "../charts/team-season-pace";
import Popover from "../popover";
import ResultEmoji from "../result-emoji.astro";
import Table from "../table.astro";

interface Props {
  games: GameData[];
  teamSeason: CollectionEntry<"teamSeasons">;
}

const { games, teamSeason } = Astro.props;

const record = ContentUtils.calculateTeamRecord(teamSeason.data.team.id, games);
const season = await getEntry(teamSeason.data.season);
const surpriseRules = await ContentUtils.getSeasonSurpriseRules(season.id);
const fmtSeason = ContentUtils.abbreviateSeasonRange(season, { compact: true });
const isSurpriseTeam = await ContentUtils.isSurprise(teamSeason, record);
const isEliminated = await ContentUtils.isEliminated(teamSeason, record);
const winsToSurprise = await ContentUtils.winsToSurprise(teamSeason);
const pace = await ContentUtils.pace(teamSeason, record);
const projectedWins = await ContentUtils.projectedWins(season.id, record);
const recordToSurprise = await ContentUtils.recordRemainingToSurprise(
  teamSeason,
  record,
);

const datapoints: ComponentProps<typeof TeamSeasonPaceChart>["data"] = [];

const teamGames = games.filter(({ teams }) =>
  teams.some(({ teamId }) => teamId === teamSeason.data.team.id),
);

for (let i = 0; i < teamGames.length; i++) {
  const gamesToPoint = teamGames.slice(0, i + 1);
  const recordToPoint = ContentUtils.calculateTeamRecord(
    teamSeason.data.team.id,
    gamesToPoint,
  );
  const paceToPoint = await ContentUtils.pace(teamSeason, recordToPoint);
  const projectedWinsToPoint = await ContentUtils.projectedWins(
    season.id,
    recordToPoint,
  );

  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  const game = teamGames[i]!;

  datapoints.push({
    date: game.playedOn,
    pace: paceToPoint,
    projectedWins: projectedWinsToPoint,
    recordFmt: ContentUtils.formatRecord(recordToPoint),
  });
}
---

<style>
  @reference "../../styles/global.css";

  .NBASurpriseTracker-TeamStats {
    grid-template-columns: 3fr 2fr;

    .NBASurpriseTracker-Table {
      > thead {
        @apply hidden;
      }

      > tbody th {
        @apply border-b-2 border-b-slate-800 text-lime-400;
      }

      > tbody td {
        @apply text-right;
      }

      > tbody th {
        @apply bg-slate-950;
      }
    }
  }
</style>

<>
  {
    (isSurpriseTeam || isEliminated) && (
      <div class="flex flex-row items-center justify-center gap-4">
        {isSurpriseTeam && (
          <>
            <ResultEmoji loading="eager" name="surprise" width={32} />
            <h2 class="text-center text-lg text-green-200 md:text-2xl">
              Surprise Team!
            </h2>
            <ResultEmoji loading="eager" name="celebration" width={32} />
          </>
        )}
        {isEliminated && (
          <>
            <ResultEmoji loading="eager" name="eliminated" width={32} />
            <p class="text-center text-lg text-green-200 md:text-2xl">
              Eliminated.
              <br />
              No surprise this year
            </p>
            <ResultEmoji loading="eager" name="disappointed" width={32} />
          </>
        )}
      </div>
    )
  }

  {
    season.data.shortened && (
      <h2 class="relative mt-8 mr-12 w-80 text-lg text-yellow-400 max-lg:mx-auto lg:mt-4 lg:ml-auto">
        Stats here have been adjusted to reflect the shortened {fmtSeason}{" "}
        season
        <Popover
          classes={{
            body: "max-w-80",
            trigger: "!-top-4 !-right-3",
          }}
          client:load
        >
          <p class="mb-4 pr-4">{season.data.shortened.reason}</p>
          <table class="table-fixed border-collapse">
            <thead>
              <tr>
                <td class="w-1/2" />
                <td class="w-1/2" />
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="p-2">
                  <span class="mr-4 font-bold underline">Games Played:</span>
                </td>
                <td class="p-2">{season.data.shortened.numGames}</td>
              </tr>
              <tr>
                <td class="p-2">
                  <span class="mr-4 font-bold underline">
                    Over/Under Cutoff:
                  </span>
                </td>
                <td class="p-2">
                  {surpriseRules.overUnderCutoff.toPrecision(3)}
                </td>
              </tr>
              <tr>
                <td class="p-2">
                  <span class="mr-4 font-bold underline">
                    Surprise Team Pace Cutoff:
                  </span>
                </td>
                <td class="p-2">
                  {Utils.signedFormatter.format(surpriseRules.paceTarget)}
                </td>
              </tr>
            </tbody>
          </table>
        </Popover>
      </h2>
    )
  }
  <div
    class="NBASurpriseTracker-TeamStats mt-12 flex flex-col-reverse gap-16 px-2 lg:grid"
  >
    <TeamSeasonPaceChart
      client:load
      data={datapoints}
      surpriseRules={surpriseRules}
      winsToSurprise={winsToSurprise}
    />
    <Table class="compact max-h-32 max-md:-mx-2">
      <Fragment slot="head">
        <tr>
          <td class="w-2/3"></td>
          <td class="w-1/3"></td>
        </tr>
      </Fragment>
      <Fragment slot="body">
        <tr>
          <th scope="row">Record</th>
          <td>{ContentUtils.formatRecord(record)}</td>
        </tr>
        <tr>
          <th scope="row">
            <span class="md:hidden">O/U</span>
            <span class="hidden md:inline">Over/Under</span>
          </th>
          <td>{teamSeason.data.overUnder}</td>
        </tr>
        <tr>
          <th class="relative" scope="row">
            Record Needed
            <Popover client:load>
              <p class="mb-1 font-bold underline">Record Needed</p>
              Record needed to qualify as a Surprise Team i.e. {
                surpriseRules.paceTarget
              } wins above a team's preseason over/under (rounded up)
            </Popover>
          </th>
          <td
            >{
              `${winsToSurprise} - ${surpriseRules.numGames - winsToSurprise}`
            }</td
          >
        </tr>
        <tr>
          <th class="relative" scope="row">
            Pace (Projected Record)
            <Popover client:load>
              <p class="mb-1 font-bold underline">Pace</p>
              <p class="mb-4">
                Current projected wins - Wins needed to surprise
              </p>
              <p class="mb-1 font-bold underline">Projected Record</p>
              <p>
                How many wins the team would have if their current winning
                percentage held for all {surpriseRules.numGames} games.
              </p>
            </Popover>
          </th>
          <td>
            {
              record.w + record.l === 0
                ? "â€”"
                : `${Utils.signedFormatter.format(pace)} (${projectedWins} - ${surpriseRules.numGames - projectedWins})`
            }
          </td>
        </tr>
        <tr>
          <th class="relative" scope="row">
            Surprise Have-to-Go
            <Popover client:load>
              <p class="mb-1 font-bold underline">Surprise Have-to-Go</p>
              <p>
                What would a team "have to go" the rest of the way to end up a
                surprise team? As in, the worst record over games remaining with
                which the team would still achieve surprise status.
              </p>
            </Popover>
          </th>
          <td>
            {
              () => {
                if (isEliminated) {
                  return (
                    <ResultEmoji class="mx-auto" name="eliminated" width={20} />
                  );
                }

                if (isSurpriseTeam) {
                  return (
                    <ResultEmoji class="mx-auto" name="surprise" width={20} />
                  );
                }

                return ContentUtils.formatRecord(recordToSurprise);
              }
            }
          </td>
        </tr>
      </Fragment>
    </Table>
  </div>
</>
