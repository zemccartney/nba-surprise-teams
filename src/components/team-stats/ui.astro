---
import type { Game, TeamSeason, TeamStats } from "../../data/types";

import * as SeasonUtils from "../../data/seasons";
import TeamSeasonPaceChart from "../charts/team-season-pace";
import Popover from "../popover";
import ResultEmoji from "../result-emoji.astro";
import Table from "../table.astro";

interface Props {
  games: Game[];
  teamSeason: TeamSeason;
}

const { games, teamSeason } = Astro.props;

const teamStats: TeamStats = {
  ...teamSeason,
  record: { l: 0, w: 0 },
};

for (const game of games) {
  const [teamA, teamZ] = game.teams;

  if (
    teamA.teamId === teamSeason.teamId ||
    teamZ.teamId === teamSeason.teamId
  ) {
    if (teamSeason.teamId === teamA.teamId) {
      teamStats.record[teamA.score > teamZ.score ? "w" : "l"] += 1;
    } else if (teamSeason.teamId === teamZ.teamId) {
      teamStats.record[teamZ.score > teamA.score ? "w" : "l"] += 1;
    }
  }
}

const season = SeasonUtils.getSeasonById(teamSeason.seasonId);
const surpriseRules = SeasonUtils.getSeasonSurpriseRules(teamSeason.seasonId);
const fmtSeason = SeasonUtils.abbreviateSeasonRange(season, { compact: true });
---

<style>
  .NBASurpriseTracker-TeamStats {
    grid-template-columns: 3fr 2fr;

    .NBASurpriseTracker-Table {
      > thead {
        @apply hidden;
      }

      > tbody th {
        @apply border-b-2 border-b-slate-800 text-lime-400;
      }

      > tbody td {
        @apply text-right;
      }

      > tbody th {
        @apply bg-slate-950;
      }
    }
  }
</style>

<>
  {
    (SeasonUtils.isSurprise(teamStats) ||
      SeasonUtils.isEliminated(teamStats)) && (
      <div class="flex flex-row items-center justify-center gap-4">
        {SeasonUtils.isSurprise(teamStats) && (
          <>
            <ResultEmoji name="surprise" width={32} />
            <h2 class="text-center text-lg text-green-200 md:text-2xl">
              Surprise Team!
            </h2>
            <ResultEmoji name="celebration" width={32} />
          </>
        )}
        {SeasonUtils.isEliminated(teamStats) && (
          <>
            <ResultEmoji name="eliminated" width={32} />
            <p class="text-center text-lg text-green-200 md:text-2xl">
              Eliminated.
              <br />
              No surprise this year
            </p>
            <ResultEmoji name="disappointed" width={32} />
          </>
        )}
      </div>
    )
  }

  {
    season.shortened && (
      <h2 class="relative mr-12 mt-8 w-80 text-lg text-yellow-400 max-lg:mx-auto lg:ml-auto lg:mt-4">
        Stats here have been adjusted to reflect the shortened {fmtSeason}{" "}
        season
        <Popover
          classes={{
            body: "max-w-80",
            trigger: "!-top-4 !-right-3",
          }}
          client:load
        >
          <p class="mb-4 pr-4">{season.shortened.reason}</p>
          <table class="table-fixed border-collapse">
            <thead>
              <tr>
                <td class="w-1/2" />
                <td class="w-1/2" />
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="p-2">
                  <span class="mr-4 font-bold underline">Games Played:</span>
                </td>
                <td class="p-2">{season.shortened.numGames}</td>
              </tr>
              <tr>
                <td class="p-2">
                  <span class="mr-4 font-bold underline">
                    Over/Under Cutoff:
                  </span>
                </td>
                <td class="p-2">
                  {surpriseRules.overUnderCutoff.toPrecision(3)}
                </td>
              </tr>
              <tr>
                <td class="p-2">
                  <span class="mr-4 font-bold underline">
                    Surprise Team Pace Cutoff:
                  </span>
                </td>
                <td class="p-2">
                  {SeasonUtils.signedFormatter.format(surpriseRules.paceTarget)}
                </td>
              </tr>
            </tbody>
          </table>
        </Popover>
      </h2>
    )
  }
  <div
    class="NBASurpriseTracker-TeamStats mt-12 flex flex-col-reverse gap-16 px-2 lg:grid"
  >
    <TeamSeasonPaceChart client:load games={games} teamSeason={teamSeason} />
    <Table class="compact max-h-32 max-md:-mx-2">
      <Fragment slot="head">
        <tr>
          <td class="w-2/3"></td>
          <td class="w-1/3"></td>
        </tr>
      </Fragment>
      <Fragment slot="body">
        <tr>
          <th scope="row">Record</th>
          <td
            >{SeasonUtils.formatRecord(teamStats?.record || { l: 0, w: 0 })}</td
          >
        </tr>
        <tr>
          <th scope="row">
            <span class="md:hidden">O/U</span>
            <span class="hidden md:inline">Over/Under</span>
          </th>
          <td>{teamSeason.overUnder}</td>
        </tr>
        <tr>
          <th class="relative" scope="row">
            Record Needed
            <Popover client:load>
              <p class="mb-1 font-bold underline">Record Needed</p>
              Record needed to qualify as a Surprise Team i.e. {
                surpriseRules.paceTarget
              } wins above a team's preseason over/under (rounded up)
            </Popover>
          </th>
          <td
            >{
              `${SeasonUtils.toSurprise(teamStats)} - ${surpriseRules.numGames - SeasonUtils.toSurprise(teamStats)}`
            }</td
          >
        </tr>
        <tr>
          <th class="relative" scope="row">
            Pace (Projected Record)
            <Popover client:load>
              <p class="mb-1 font-bold underline">Pace</p>
              <p class="mb-4">
                Current projected wins - Wins needed to surprise
              </p>
              <p class="mb-1 font-bold underline">Projected Record</p>
              <p>
                How many wins the team would have if their current winning
                percentage held for all {surpriseRules.numGames} games.
              </p>
            </Popover>
          </th>
          <td>
            {
              `${SeasonUtils.formatPace(teamStats)}${teamStats.record ? ` (${SeasonUtils.projectedWins(teamStats)} - ${surpriseRules.numGames - SeasonUtils.projectedWins(teamStats)})` : ""}`
            }
          </td>
        </tr>
        <tr>
          <th class="relative" scope="row">
            Surprise Have-to-Go
            <Popover client:load>
              <p class="mb-1 font-bold underline">Surprise Have-to-Go</p>
              <p>
                What would a team "have to go" the rest of the way to end up a
                surprise team? As in, the worst record over games remaining with
                which the team would still achieve surprise status.
              </p>
            </Popover>
          </th>
          <td>
            {
              () => {
                if (SeasonUtils.isEliminated(teamStats)) {
                  return (
                    <ResultEmoji class="mx-auto" name="eliminated" width={20} />
                  );
                }

                if (SeasonUtils.isSurprise(teamStats)) {
                  return (
                    <ResultEmoji class="mx-auto" name="surprise" width={20} />
                  );
                }

                return SeasonUtils.formatRecord(
                  SeasonUtils.recordRemainingToSurprise(teamStats),
                );
              }
            }
          </td>
        </tr>
      </Fragment>
    </Table>
  </div>
</>
