---
import { actions } from "astro:actions";
import { getEntry } from "astro:content";

import type { SeasonsEntry, TeamCode } from "../../content/utils";

import Crash from "../crash.astro";
import UI from "./ui.astro";

interface Props {
  // for server islands, important to keep props size small, given used in request params, hence not a full team record
  // Further, these props determine cache key (request URL) for server island i.e. we want different cache entries
  // per team season
  seasonId: SeasonsEntry["id"];
  teamId: TeamCode;
}

const { seasonId, teamId } = Astro.props;

const teamSeason = await getEntry("teamSeasons", `${seasonId}/${teamId}`);

if (!teamSeason) {
  throw new Error(
    `[team-stats] team ${teamId} not found for ${seasonId} season`,
  );
}

// TODO Output here is games data, not game records,
const { data, error } = await Astro.callAction(actions.getSeasonData, {
  seasonId: teamSeason?.data.seasonId,
});

if (!error) {
  const { expiresAt } = data;

  if (expiresAt) {
    Astro.response.headers.set(
      "Cache-Control",
      `public, max-age=${Math.round((expiresAt - Date.now()) / 1000)}`,
    );
  }
}
---

{error ? <Crash /> : <UI games={data.games} teamSeason={teamSeason} />}
