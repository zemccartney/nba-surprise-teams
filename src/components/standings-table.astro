---
import { actions } from "astro:actions";
import Error from "./error.astro";
import Link from "./link.astro";
import Logo from "./logo.astro";
import Popover from "./popover";
import ResultEmoji from "./result-emoji.astro";
import Table from "./table.astro";
import { TEAMS, getTeamSeason } from "../data";
import type { TeamCodeType, Team } from "../data";
import * as Utils from "../utils";
import type { TeamStats } from "../utils";

interface Props {
  seasonId: number;
}

type TeamRow = Team & TeamStats;

const { seasonId } = Astro.props;

const teamRows: TeamRow[] = [];

const { error, data } = await Astro.callAction(actions.getSeasonData, {
  seasonId,
});

if (!error) {
  // TODO Need to handle lookup errors?
  const teams = TEAMS.map((team) => {
    const inSeason = getTeamSeason(team.id, seasonId);

    if (inSeason) {
      return {
        ...team,
        overUnder: inSeason.overUnder,
      };
    }

    return false;
  }).filter(Boolean);

  const records: {
    [key in TeamCodeType]?: TeamRow;
  } = {};

  for (const team of teams) {
    records[team.id] = {
      ...team,
      w: 0,
      l: 0,
    };
  }

  const { games, expiresAt } = data;

  for (const game of games) {
    const homeWin = game.homeScore > game.awayScore;

    // TODO Possible to not have to resort to ! here?

    if (game.homeTeam in records) {
      records[game.homeTeam as TeamCodeType]![homeWin ? "w" : "l"] += 1;
    }

    if (game.awayTeam in records) {
      records[game.awayTeam as TeamCodeType]![homeWin ? "l" : "w"] += 1;
    }
  }

  teamRows.push(
    ...Object.values(records).toSorted((a, b) => Utils.pace(b) - Utils.pace(a)),
  );

  // Standings table only ever used on home page i.e. single URL, so single cache entry
  if (expiresAt) {
    Astro.response.headers.set(
      "Cache-Control",
      `public, max-age=${Math.round((expiresAt - Date.now()) / 1000)}, must-revalidate`,
    );
  }
}
---

<script>
  const mediaQueryList = globalThis.matchMedia(
    "not all and (min-width: 640px)",
  );

  function handleOrientationChange(ev: MediaQueryList | MediaQueryListEvent) {
    const table = document.querySelector("#standings");
    if (ev.matches) {
      table?.classList.add("compact");
    } else {
      table?.classList.remove("compact");
    }
  }

  handleOrientationChange(mediaQueryList);
  mediaQueryList.addEventListener("change", handleOrientationChange);
</script>

{
  error ? (
    <Error />
  ) : (
    <Table
      id="standings"
      class="stickyHeader w-[100%] max-w-4xl table-fixed md:mx-auto"
    >
      <Fragment slot="head">
        <tr>
          <td class="w-1/2" />
          <th scope="col" class="md:w-1/3">
            <span class="md:hidden">O/U</span>
            <span class="hidden md:inline">Over/Under</span>
          </th>
          <th scope="col" class="relative text-right">
            Pace
            <Popover client:load>
              <p class="mb-1 font-bold underline">Pace</p>
              <p>
                Current Wins - Wins needed to surprise (10 wins above a team's
                preseason over/under (rounded up))
              </p>
            </Popover>
          </th>
        </tr>
      </Fragment>
      <Fragment slot="body">
        {teamRows.map((team) => {
          return (
            <tr>
              <th scope="row">
                <div class="flex flex-row items-center gap-4">
                  <Logo team={team.id} />
                  <Link class="relative" href={`/${seasonId}/${team.id}`}>
                    <span class="hidden md:inline">{team.name}</span>
                    <span class="md:hidden">{team.id}</span>
                    <span
                      class:list={[
                        "absolute -top-3 flex flex-row gap-2",
                        {
                          "-right-8":
                            Utils.isSurprise(team) || Utils.isEliminated(team),
                        },
                      ]}
                    >
                      {Utils.isSurprise(team) && (
                        <ResultEmoji name="surprise" width={20} />
                      )}
                      {Utils.isEliminated(team) && (
                        <ResultEmoji name="eliminated" width={20} />
                      )}
                    </span>
                  </Link>
                </div>
              </th>
              <td class="text-right">{team.overUnder}</td>
              <td class="text-right">{Utils.displayPace(Utils.pace(team))} </td>
            </tr>
          );
        })}
      </Fragment>
      <Fragment slot="foot">
        <tr>
          <td colspan="3" class="space-y-2 px-4 py-4">
            <div class="flex flex-row gap-4">
              <ResultEmoji name="surprise" width={18} />
              <span class="text-xl italic text-lime-400">Surprise Team</span>
            </div>
            <div class="flex flex-row gap-4">
              <ResultEmoji name="eliminated" width={18} />
              <span class="text-xl italic text-lime-400">Eliminated</span>
            </div>
          </td>
        </tr>
      </Fragment>
    </Table>
  )
}
