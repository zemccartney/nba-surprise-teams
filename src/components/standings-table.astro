---
interface Props {
  seasonId: number;
}

import { actions } from "astro:actions";
import Image from "astro/components/Image.astro";
import Logo from "../components/logo.astro";
import EliminatedEmoji from "../assets/images/emoji/skull-and-crossbones.svg";
import SurprisedEmoji from "../assets/images/emoji/hushed-face.svg";
import { TEAMS, TEAM_SEASONS } from "../data";
import type { TeamCodeType } from "../data";
import type { Team } from "../data";

interface TeamRow extends Team {
  overUnder: number;
  w: number;
  l: number;
}

const { seasonId } = Astro.props;

const teamRows: TeamRow[] = [];
const toSurprise = (team: TeamRow) => Math.ceil(team.overUnder + 10); // ceil b/c all over unders are either integers or end in 0.5 (so round up)
const currentWinPct = (team: TeamRow) => team.w / (team.w + team.l);
const projectedWins = (team: TeamRow) => Math.floor(82 * currentWinPct(team)); // TODO Is floor correct here? I think we want to take a pessimistic view here?
const isSurprise = (team: TeamRow) => team.w >= toSurprise(team);
const isEliminated = (team: TeamRow) =>
  toSurprise(team) - team.w > 82 - (team.w + team.l);

const pace = (team: TeamRow) => {
  return projectedWins(team) - toSurprise(team);
};

// TODO What would happen if we threw here? No UI returned, throw up on ourselves, need to handle error
const { error, data: games } = await Astro.callAction(actions.getSeasonData, {
  seasonId,
});

if (!error) {
  // TODO Need to handle lookup errors?
  const teams = TEAMS.map((team) => {
    const inSeason = TEAM_SEASONS.find(
      (ts) => ts.season === seasonId && ts.team === team.id,
    );

    if (inSeason) {
      return {
        ...team,
        overUnder: inSeason.overUnder,
      };
    }

    return false;
  }).filter(Boolean);

  const records: {
    [key in TeamCodeType]?: TeamRow;
  } = {};

  for (const team of teams) {
    records[team.id] = {
      ...team,
      w: 0,
      l: 0,
    };
  }

  for (const game of games) {
    const homeWin = game.homeScore > game.awayScore;

    // TODO Possible to not have to resort to ! here?

    if (game.homeTeam in records) {
      records[game.homeTeam]![homeWin ? "w" : "l"] += 1;
    }

    if (game.awayTeam in records) {
      records[game.awayTeam]![homeWin ? "l" : "w"] += 1;
    }
  }

  teamRows.push(
    ...Object.values(records).toSorted((a, b) => pace(b) - pace(a)),
  );
}
---

{/* TODO Handle error here somehow... or fine if empty? */}

<style>
  #standings {
    border-collapse: collapse;
    box-shadow: 0px 0px 80px 40px rgb(163 230 53 / 0.5); /* shadow-lime-400/50 */
    position: relative;

    > thead th {
      @apply sticky bg-slate-950 p-6 text-right text-4xl text-lime-400;
      top: 0;
      z-index: 1;
    }

    > tbody th,
    > tbody td {
      @apply px-4 py-8 text-4xl text-green-200;
    }

    > tbody > tr {
      &:nth-of-type(2n + 1) {
        @apply bg-lime-950;
      }
    }
  }
</style>

<table id="standings" class="w-[100%] max-w-4xl table-fixed md:mx-auto">
  <thead>
    <tr>
      <th scope="col" class="w-1/2"></th>
      <th scope="col" class="md:w-1/3">
        <span class="md:hidden">O/U</span>
        <span class="hidden md:inline">Over/Under</span>
      </th>
      <th scope="col" class="text-right">Pace</th>
    </tr>
  </thead>
  <tbody>
    {
      teamRows.map((team) => {
        return (
          <tr>
            <th scope="row">
              <div class="flex flex-row items-center gap-4">
                <Logo team={team.id} />
                <a
                  class="relative text-indigo-400 underline hover:text-indigo-100"
                  href="/2024/bkn"
                >
                  <span class="hidden md:inline">{team.name}</span>
                  <span class="md:hidden">{team.id}</span>
                  <span
                    class={`absolute -right-${[isSurprise(team), isEliminated(team)].filter(Boolean).length * 8} -top-3 flex flex-row gap-2`}
                  >
                    {isSurprise(team) && (
                      <Image
                        src={SurprisedEmoji}
                        alt="Emoji indicating team is a surprise team"
                        width={20}
                      />
                    )}
                    {isEliminated(team) && (
                      <Image
                        src={EliminatedEmoji}
                        alt="Emoji indicating given team is eliminated from surprise team contention"
                        width={20}
                      />
                    )}
                  </span>
                </a>
              </div>
            </th>
            <td class="text-right">{team.overUnder}</td>
            <td class="text-right">{pace(team)}</td>
          </tr>
        );
      })
    }
  </tbody>
  <tfoot class="bg-slate-950">
    <tr>
      <td colspan="3" class="space-y-2 px-4 py-4">
        <div class="flex flex-row gap-4">
          <Image
            src={SurprisedEmoji}
            alt="Emoji indicating team is a surprise team"
            width={16}
          />
          <span class="text-xl italic text-lime-400">Surprise Team</span>
        </div>
        <div class="flex flex-row gap-4">
          <Image
            src={EliminatedEmoji}
            alt="Emoji indicating given team is eliminated from surprise team contention"
            width={16}
          />
          <span class="text-xl italic text-lime-400">Eliminated</span>
        </div>
      </td>
    </tr>
  </tfoot>
</table>
