---
import { actions } from "astro:actions";
import Image from "astro/components/Image.astro";
import Link from "./link.astro";
import Logo from "./logo.astro";
import Table from "./table.astro";
import EliminatedEmoji from "../assets/images/emoji/skull-and-crossbones.svg";
import SurprisedEmoji from "../assets/images/emoji/hushed-face.svg";
import { TEAMS, getTeamSeason } from "../data";
import type { TeamCodeType, Team } from "../data";
import * as Utils from "../utils";
import type { TeamStats } from "../utils";

interface Props {
  seasonId: number;
}

type TeamRow = Team & TeamStats;

const { seasonId } = Astro.props;

const teamRows: TeamRow[] = [];

const { error, data: games } = await Astro.callAction(actions.getSeasonData, {
  seasonId,
});

if (!error) {
  // TODO Need to handle lookup errors?
  const teams = TEAMS.map((team) => {
    const inSeason = getTeamSeason(team.id, seasonId);

    if (inSeason) {
      return {
        ...team,
        overUnder: inSeason.overUnder,
      };
    }

    return false;
  }).filter(Boolean);

  const records: {
    [key in TeamCodeType]?: TeamRow;
  } = {};

  for (const team of teams) {
    records[team.id] = {
      ...team,
      w: 0,
      l: 0,
    };
  }

  for (const game of games) {
    const homeWin = game.homeScore > game.awayScore;

    // TODO Possible to not have to resort to ! here?

    if (game.homeTeam in records) {
      records[game.homeTeam]![homeWin ? "w" : "l"] += 1;
    }

    if (game.awayTeam in records) {
      records[game.awayTeam]![homeWin ? "l" : "w"] += 1;
    }
  }

  teamRows.push(
    ...Object.values(records).toSorted((a, b) => Utils.pace(b) - Utils.pace(a)),
  );
}
---

{/* TODO Handle error here somehow... or fine if empty? */}

<Table class="w-[100%] max-w-4xl table-fixed md:mx-auto" stickyHeader>
  <Fragment slot="head">
    <tr>
      <th scope="col" class="w-1/2"></th>
      <th scope="col" class="md:w-1/3">
        <span class="md:hidden">O/U</span>
        <span class="hidden md:inline">Over/Under</span>
      </th>
      <th scope="col" class="text-right">Pace</th>
    </tr>
  </Fragment>
  <Fragment slot="body">
    {
      teamRows.map((team) => {
        return (
          <tr>
            <th scope="row">
              <div class="flex flex-row items-center gap-4">
                <Logo team={team.id} />
                <Link class="relative" href={`/${seasonId}/${team.id}`}>
                  <span class="hidden md:inline">{team.name}</span>
                  <span class="md:hidden">{team.id}</span>
                  <span
                    class:list={[
                      "absolute -top-3 flex flex-row gap-2",
                      {
                        "-right-8":
                          Utils.isSurprise(team) || Utils.isEliminated(team),
                      },
                    ]}
                  >
                    {Utils.isSurprise(team) && (
                      <Image
                        src={SurprisedEmoji}
                        alt="Emoji indicating team is a surprise team"
                        width={20}
                      />
                    )}
                    {Utils.isEliminated(team) && (
                      <Image
                        src={EliminatedEmoji}
                        alt="Emoji indicating given team is eliminated from surprise team contention"
                        width={20}
                      />
                    )}
                  </span>
                </Link>
              </div>
            </th>
            <td class="text-right">{team.overUnder}</td>
            <td class="text-right">{Utils.displayPace(Utils.pace(team))}</td>
          </tr>
        );
      })
    }
  </Fragment>
  <Fragment slot="foot">
    <tr>
      <td colspan="3" class="space-y-2 px-4 py-4">
        <div class="flex flex-row gap-4">
          <Image
            src={SurprisedEmoji}
            alt="Emoji indicating team is a surprise team"
            width={16}
          />
          <span class="text-xl italic text-lime-400">Surprise Team</span>
        </div>
        <div class="flex flex-row gap-4">
          <Image
            src={EliminatedEmoji}
            alt="Emoji indicating given team is eliminated from surprise team contention"
            width={16}
          />
          <span class="text-xl italic text-lime-400">Eliminated</span>
        </div>
      </td>
    </tr>
  </Fragment>
</Table>
