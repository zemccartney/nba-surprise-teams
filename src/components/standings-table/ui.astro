---
import type { CollectionEntry } from "astro:content";

import { getEntry } from "astro:content";

import type { GameData } from "../../content/utils";

import * as ContentUtils from "../../content/utils";
import * as Utils from "../../utils";
import Link from "../link.astro";
import Logo from "../logo.astro";
import Popover from "../popover";
import ResultEmoji from "../result-emoji.astro";
import Table from "../table.astro";

interface Props {
  games: GameData[];
  seasonId: CollectionEntry<"seasons">["id"];
  title?: string;
}

const { games, seasonId, title } = Astro.props;

const teamsInSeason = await ContentUtils.getTeamsInSeason(seasonId);

const teamRows = [];

for (const team of teamsInSeason) {
  const record = ContentUtils.calculateTeamRecord(team.id, games);
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  const teamSeason = await getEntry("teamSeasons", `${seasonId}/${team.id}`)!;

  teamRows.push({
    isEliminated: await ContentUtils.isEliminated(teamSeason, record),
    isSurpriseTeam: await ContentUtils.isSurprise(teamSeason, record),
    pace: await ContentUtils.pace(teamSeason, record),
    team,
    teamSeason,
  });
}

teamRows.sort((a, b) => b.pace - a.pace);

const surpriseRules = await ContentUtils.getSeasonSurpriseRules(seasonId);
---

<script>
  const mediaQueryList = globalThis.matchMedia(
    "not all and (min-width: 640px)",
  );

  function handleOrientationChange(ev: MediaQueryList | MediaQueryListEvent) {
    const table = document.querySelector("#standings");
    if (ev.matches) {
      table?.classList.add("compact");
    } else {
      table?.classList.remove("compact");
    }
  }

  handleOrientationChange(mediaQueryList);
  mediaQueryList.addEventListener("change", handleOrientationChange);
</script>

<Table class="stickyHeader w-full max-w-4xl md:mx-auto" id="standings">
  <Fragment slot="head">
    <tr>
      <td class="w-1/2 !text-left">{title}</td>
      <th class="md:w-1/3" scope="col">
        <span class="md:hidden">O/U</span>
        <span class="hidden md:inline">Over/Under</span>
      </th>
      <th class="relative text-right" scope="col">
        Pace
        <Popover client:load>
          <p class="mb-1 font-bold underline">Pace</p>
          <p>
            Current Projected Wins - Wins needed to surprise ({
              surpriseRules.paceTarget
            } wins above a team's preseason over/under (rounded up))
          </p>
        </Popover>
      </th>
    </tr>
  </Fragment>
  <Fragment slot="body">
    {
      teamRows.map((teamRow) => {
        return (
          <tr>
            <th scope="row">
              <div class="flex flex-row items-center gap-4">
                <Logo seasonId={seasonId} team={teamRow.team} />
                <Link href={`/${seasonId}/${teamRow.team.id}`}>
                  <span class="relative hidden md:inline">
                    {ContentUtils.resolveTeamName(teamRow.team, seasonId)}
                    <span
                      class:list={[
                        "absolute",
                        {
                          "-right-8":
                            teamRow.isSurpriseTeam || teamRow.isEliminated,
                        },
                      ]}
                    >
                      {teamRow.isSurpriseTeam && (
                        <ResultEmoji name="surprise" width={20} />
                      )}
                      {teamRow.isEliminated && (
                        <ResultEmoji name="eliminated" width={20} />
                      )}
                    </span>
                  </span>

                  <span class="relative md:hidden">
                    {teamRow.team.id}
                    <span
                      class:list={[
                        "absolute",
                        {
                          "-right-8":
                            teamRow.isSurpriseTeam || teamRow.isEliminated,
                        },
                      ]}
                    >
                      {teamRow.isSurpriseTeam && (
                        <ResultEmoji name="surprise" width={20} />
                      )}
                      {teamRow.isEliminated && (
                        <ResultEmoji name="eliminated" width={20} />
                      )}
                    </span>
                  </span>
                </Link>
              </div>
            </th>
            <td class="text-right">{teamRow.teamSeason.data.overUnder}</td>
            <td class="text-right">
              {Utils.signedFormatter.format(teamRow.pace)}{" "}
            </td>
          </tr>
        );
      })
    }
  </Fragment>
  <Fragment slot="foot">
    <tr>
      <td class="space-y-2 px-4 py-4" colspan="3">
        <div class="flex flex-row gap-4">
          <ResultEmoji name="surprise" width={18} />
          <span class="text-xl text-lime-400 italic">Surprise Team</span>
        </div>
        <div class="flex flex-row gap-4">
          <ResultEmoji name="eliminated" width={18} />
          <span class="text-xl text-lime-400 italic">Eliminated</span>
        </div>
      </td>
    </tr>
  </Fragment>
</Table>
