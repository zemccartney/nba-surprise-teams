---
import type {
  Game,
  SeasonId,
  Team,
  TeamCode,
  TeamStats,
} from "../../data/types";

import * as SeasonUtils from "../../data/seasons";
import * as TeamUtils from "../../data/teams";
import Link from "../link.astro";
import Logo from "../logo.astro";
import Popover from "../popover";
import ResultEmoji from "../result-emoji.astro";
import Table from "../table.astro";

interface Props {
  games: Game[];
  seasonId: SeasonId;
  title?: string;
}

type TeamRow = Team & TeamStats;

const { games, seasonId, title } = Astro.props;

const teamRows: TeamRow[] = [];

const teams = SeasonUtils.getTeamsInSeason(seasonId).map((team) => ({
  ...team,
  ...SeasonUtils.getTeamSeason(seasonId, team.id),
}));

const partialRecords: Partial<Record<TeamCode, TeamRow>> = {};

for (const team of teams) {
  // @ts-expect-error: teams unassignable b/c WAS team record has an intentionally incorrectly typed duration year
  partialRecords[team.id] = {
    ...team,
    record: { l: 0, w: 0 },
  };
}

// Workaround typescript complaining about initializing the following type to an empty object
// TODO Possible to switch TeamCode back to SeasonData["teams"]? Is the issue that ts can't
// narrow a discriminated union w/o explicitly checking the exact value? Have zod parse? generic?
const records = partialRecords as Record<TeamCode, TeamRow>;

for (const game of games) {
  const [teamA, teamZ] = game.teams;

  // Some games here will have team codes outside the ones we've stored in the app so far.
  // That's fine; TS doesn't need to care, will gradually add in codes as seasons call for them

  if (records[teamA.teamId]) {
    records[teamA.teamId].record[teamA.score > teamZ.score ? "w" : "l"] += 1;
  }

  if (records[teamZ.teamId]) {
    records[teamZ.teamId].record[teamZ.score > teamA.score ? "w" : "l"] += 1;
  }
}

teamRows.push(
  ...Object.values(records).toSorted(
    (a, b) => SeasonUtils.pace(b) - SeasonUtils.pace(a),
  ),
);

const surpriseRules = SeasonUtils.getSeasonSurpriseRules(seasonId);
---

<script>
  const mediaQueryList = globalThis.matchMedia(
    "not all and (min-width: 640px)",
  );

  function handleOrientationChange(ev: MediaQueryList | MediaQueryListEvent) {
    const table = document.querySelector("#standings");
    if (ev.matches) {
      table?.classList.add("compact");
    } else {
      table?.classList.remove("compact");
    }
  }

  handleOrientationChange(mediaQueryList);
  mediaQueryList.addEventListener("change", handleOrientationChange);
</script>

<Table class="stickyHeader w-full max-w-4xl md:mx-auto" id="standings">
  <Fragment slot="head">
    <tr>
      <td class="w-1/2 !text-left">{title}</td>
      <th class="md:w-1/3" scope="col">
        <span class="md:hidden">O/U</span>
        <span class="hidden md:inline">Over/Under</span>
      </th>
      <th class="relative text-right" scope="col">
        Pace
        <Popover client:load>
          <p class="mb-1 font-bold underline">Pace</p>
          <p>
            Current Projected Wins - Wins needed to surprise ({
              surpriseRules.paceTarget
            } wins above a team's preseason over/under (rounded up))
          </p>
        </Popover>
      </th>
    </tr>
  </Fragment>
  <Fragment slot="body">
    {
      teamRows.map((teamRow) => {
        return (
          <tr>
            <th scope="row">
              <div class="flex flex-row items-center gap-4">
                <Logo seasonId={teamRow.seasonId} teamId={teamRow.id} />
                <Link href={`/${seasonId}/${teamRow.id}`} id="linky">
                  <span class="relative hidden md:inline">
                    {TeamUtils.resolveTeamName(seasonId, teamRow.id)}
                    <span
                      class:list={[
                        "absolute",
                        {
                          "-right-8":
                            SeasonUtils.isSurprise(teamRow) ||
                            SeasonUtils.isEliminated(teamRow),
                        },
                      ]}
                    >
                      {SeasonUtils.isSurprise(teamRow) && (
                        <ResultEmoji name="surprise" width={20} />
                      )}
                      {SeasonUtils.isEliminated(teamRow) && (
                        <ResultEmoji name="eliminated" width={20} />
                      )}
                    </span>
                  </span>

                  <span class="relative md:hidden">
                    {teamRow.id}
                    <span
                      class:list={[
                        "absolute",
                        {
                          "-right-8":
                            SeasonUtils.isSurprise(teamRow) ||
                            SeasonUtils.isEliminated(teamRow),
                        },
                      ]}
                    >
                      {SeasonUtils.isSurprise(teamRow) && (
                        <ResultEmoji name="surprise" width={20} />
                      )}
                      {SeasonUtils.isEliminated(teamRow) && (
                        <ResultEmoji name="eliminated" width={20} />
                      )}
                    </span>
                  </span>
                </Link>
              </div>
            </th>
            <td class="text-right">{teamRow.overUnder}</td>
            <td class="text-right">{SeasonUtils.formatPace(teamRow)} </td>
          </tr>
        );
      })
    }
  </Fragment>
  <Fragment slot="foot">
    <tr>
      <td class="space-y-2 px-4 py-4" colspan="3">
        <div class="flex flex-row gap-4">
          <ResultEmoji name="surprise" width={18} />
          <span class="text-xl text-lime-400 italic">Surprise Team</span>
        </div>
        <div class="flex flex-row gap-4">
          <ResultEmoji name="eliminated" width={18} />
          <span class="text-xl text-lime-400 italic">Eliminated</span>
        </div>
      </td>
    </tr>
  </Fragment>
</Table>
