---
import Layout from "../layouts/layout.astro";
import Link from "../components/link.astro";
import StandingsTable from "../components/standings-table/index.astro";
import { SEASONS, getTeamsInSeason } from "../data";
import * as Utils from "../utils";

const latestSeason = SEASONS.toSorted((a, b) =>
  a.endDate > b.endDate ? -1 : a.endDate < b.endDate ? 1 : 0,
)[0];

if (!latestSeason) {
  // TODO Build error; doc assumption of state we need to meet (data/build contract, not ... API / interface contract?
  // is that a helpful / non-gibberish distinction?
  // TODO Remove this error, centralize build contract elsewhere... tests? i.e. what data conditions do we need to meet
  // such that the site will build into an acceptable state?
  throw new Error("Insufficient season data");
}

const isSeasonReady = getTeamsInSeason(latestSeason.id).length > 0;
---

<Layout>
  <Fragment slot="header">
    <h1 class="text-center font-title text-3xl text-lime-400 md:text-7xl">
      NBA Surprise Teams Tracker
    </h1>
    <nav class="mt-8 flex flex-row justify-center gap-16 md:mt-16">
      <Link href="/info">What is this?</Link>
      <Link href="/archive">Archive</Link>
    </nav>
  </Fragment>
  <main class="mt-4 pb-24 sm:mt-16 md:px-8">
    {isSeasonReady && <StandingsTable seasonId={latestSeason.id} />}
    {
      !isSeasonReady && (
        <div>
          <h2 class="text-center font-title text-2xl text-lime-400 md:text-4xl">
            Countdown to the{" "}
            {Utils.abbreviateSeasonRange(latestSeason, { compact: true })}{" "}
            season
          </h2>
          <p>
            Next season kicks off on{" "}
            {new Date(latestSeason.startDate).toLocaleDateString()}. Pre-season
            over/unders are typically posted mid-September. Till then, check out
            how <a href="/archive">past years</a> shook out.
          </p>
        </div>
      )
    }
  </main>
</Layout>
