---
import type { GetStaticPaths, InferGetStaticParamsType } from "astro";

import Link from "../../components/link.astro";
import Logo from "../../components/logo.astro";
import TeamStats from "../../components/team-stats/index.astro";
import * as SeasonUtils from "../../data/seasons";
import * as TeamUtils from "../../data/teams";
import Subpage from "../../layouts/subpage.astro";

export const getStaticPaths = (() => {
  return SeasonUtils.getAllTeamSeasons().map((ts) => ({
    params: { season: ts.seasonId, team: ts.teamId },
  }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { season: seasonId, team: teamId } = Astro.params as Params;

const team = TeamUtils.getTeamById(teamId);
const season = SeasonUtils.getSeasonById(
  // TODO File bug? param mistyped; typed as a number in IDE, but actually a string
  // @ts-expect-error : "Argument of type 'number' is not assignable to parameter of type 'string'"
  Number.parseInt(seasonId, 10),
);

const hasArchive = await SeasonUtils.getSeasonArchive(season.id);
const fmtSeason = SeasonUtils.abbreviateSeasonRange(season, { compact: true });
---

<Subpage
  description={`${fmtSeason} Season Results for the ${team.name}`}
  title={`${team.id} ${fmtSeason}`}
>
  {
    hasArchive && (
      <div class="mb-12 text-center md:-mt-6">
        <Link class="text-lg md:text-xl lg:text-2xl" href={`/${season.id}`}>
          Back to {fmtSeason} Season
        </Link>
      </div>
    )
  }

  <div
    class="mb-12 flex flex-col items-center justify-center gap-8 sm:px-8 lg:flex-row"
  >
    <Logo class="w-[96px]" seasonId={season.id} teamId={team.id} />
    <h1 class="text-balance text-center font-title text-4xl text-lime-400">
      {TeamUtils.resolveTeamName(season.id, team.id)}
    </h1>
    {
      hasArchive && (
        <p class="whitespace-nowrap font-title text-4xl text-lime-400">
          {fmtSeason}
        </p>
      )
    }
  </div>
  <TeamStats seasonId={season.id} teamId={team.id} />
</Subpage>
