---
import Subpage from "../../layouts/subpage.astro";
import Logo from "../../components/logo.astro";
import TeamStats from "../../components/team-stats/index.astro";
import { TEAM_SEASONS, getTeamById, getSeasonById } from "../../data";
import type { TeamCode } from "../../data";
import * as Utils from "../../utils";

export function getStaticPaths() {
  return TEAM_SEASONS.map((ts) => ({
    params: { season: ts.season, team: ts.team },
  }));
}

// TODO File bug? param mistyped; typed as a number in IDE, but actually a string
// @ts-expect-error : "Argument of type 'number' is not assignable to parameter of type 'string'"
const seasonId = Number.parseInt(Astro.params.season, 10);

const team = getTeamById(Astro.params.team as TeamCode);
const season = getSeasonById(seasonId);

// Making TS happy; TODO maybe a better way to do this / workaround? constant data queries
// should be guaranteed to return results, given paths from which query params are derived are
// derived from those same constants
if (!team) {
  throw new Error(`[Page: team.astro] Team ${Astro.params.team} not found`);
}

if (!season) {
  throw new Error(`[Page: team.astro] Season ${Astro.params.season} not found`);
}

const fmtSeason = Utils.abbreviateSeasonRange(season, { compact: true });
---

<Subpage
  title={`${team.id} ${fmtSeason}`}
  description={`${fmtSeason} Season Results for the ${team.name}`}
>
  <div
    class="mb-12 flex flex-col items-center justify-center gap-8 sm:px-8 lg:flex-row"
  >
    <Logo teamCode={team.id} class="w-[96px]" />
    <h1 class="text-center font-title text-4xl text-lime-400">
      {fmtSeason}
      {team.name}
    </h1>
  </div>
  <TeamStats seasonId={season.id} teamId={team.id} />
</Subpage>
