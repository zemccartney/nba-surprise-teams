---
import type { GetStaticPaths, InferGetStaticParamsType } from "astro";

import type { Season } from "../../data/types";

import ArrowLeftSvg from "../../assets/images/arrow-line-left.svg";
import ArrowRightSvg from "../../assets/images/arrow-line-right.svg";
import Link from "../../components/link.astro";
import StandingsTable from "../../components/standings-table/index.astro";
import * as SeasonUtils from "../../data/seasons";
import Subpage from "../../layouts/subpage.astro";

export const getStaticPaths = (async () => {
  return SeasonUtils.getAllSeasons()
    .filter((season) => SeasonUtils.getTeamsInSeason(season.id).length > 0)
    .map((season) => ({
      params: { season: season.id },
    }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { season: seasonId } = Astro.params as Params;

const season = SeasonUtils.getSeasonById(
  // TODO File bug? param mistyped; typed as a number in IDE, but actually a string
  // @ts-expect-error : "Argument of type 'number' is not assignable to parameter of type 'string'"
  Number.parseInt(seasonId, 10),
);

// eslint-disable-next-line unicorn/no-await-expression-member
const archivedSeasons = (await SeasonUtils.getArchivedSeasons()).reverse();
const adjacent = (x: -1 | 1) => {
  const si = archivedSeasons.findIndex((s) => s.id === season.id) + x;

  if (si === -1) {
    return false;
  }

  return archivedSeasons.at(si) as Season;
};

const hasArchive = await SeasonUtils.getSeasonArchive(season.id);
const surpriseRules = SeasonUtils.getSeasonSurpriseRules(season.id);
const fmtSeason = SeasonUtils.abbreviateSeasonRange(season, { compact: true });
---

<Subpage
  description={`Results for the ${fmtSeason} season`}
  title={`${fmtSeason} Season`}
>
  <div class="px-0 md:px-8">
    {
      hasArchive && (
        <div class="mb-12 flex flex-row items-center justify-center gap-12 md:-mt-12">
          {adjacent(-1) && (
            <a
              class="flex flex-row items-center justify-center gap-4 border-2 border-indigo-500 bg-slate-950 px-4 py-2 text-base text-lime-500 hover:border-slate-950 hover:bg-lime-500 hover:text-slate-950 md:text-xl"
              href={`/${(adjacent(-1) as Season).id}`}
            >
              <ArrowLeftSvg class="fill-current" />
              <span>
                {SeasonUtils.abbreviateSeasonRange(adjacent(-1) as Season, {
                  compact: true,
                })}{" "}
                Season
              </span>
            </a>
          )}
          {adjacent(1) && (
            <a
              class="flex flex-row items-center justify-center gap-4 border-2 border-indigo-500 bg-slate-950 px-4 py-2 text-base text-lime-500 hover:border-slate-950 hover:bg-lime-500 hover:text-slate-950 md:text-xl"
              href={`/${(adjacent(1) as Season).id}`}
            >
              {SeasonUtils.abbreviateSeasonRange(adjacent(1) as Season, {
                compact: true,
              })}{" "}
              Season
              <ArrowRightSvg class="fill-current" />
            </a>
          )}
        </div>
      )
    }
    <h1
      class:list={[
        "font-title text-center text-2xl text-lime-400 md:text-4xl",
        season.episodeUrl || season.shortened
          ? "mb-6 sm:mb-12"
          : "mb-12 sm:mb-24",
      ]}
    >
      {`${fmtSeason} Season`}
    </h1>
    {
      season.episodeUrl && (
        <div class="mb-12 text-center sm:mb-24">
          <Link
            class="text-xl md:text-2xl lg:text-4xl"
            href={season.episodeUrl}
            target="_blank"
          >
            <span class="italic">Slam N' Jam</span> Episode
          </Link>
        </div>
      )
    }
    {
      season.shortened && (
        <section class="mb-12 flex flex-1 flex-col items-center px-4 text-xl text-yellow-200 sm:mb-24">
          <h2 class="text-2xl text-balance text-yellow-400">
            Shortened season: {season.shortened.numGames} games played
          </h2>
          <h3 class="text-center text-balance">{season.shortened.reason}</h3>
          <h3 class="mt-4 underline">Adjustments</h3>
          <ul class="md:ps-[2em]; flex list-inside list-disc flex-col items-center ps-[1em]">
            {/* Consistent widths to align bullets while centering */}
            <li class="w-96">
              Over/Under Cutoff:{" "}
              <span class="text-yellow-400">
                {surpriseRules.overUnderCutoff.toPrecision(3)}
              </span>
            </li>
            <li class="w-96">
              Surprise Team Pace Cutoff:{" "}
              <span class="text-yellow-400">
                {SeasonUtils.signedFormatter.format(surpriseRules.paceTarget)}
              </span>
            </li>
          </ul>
        </section>
      )
    }
    <StandingsTable seasonId={season.id} title={false} />
  </div>
</Subpage>
