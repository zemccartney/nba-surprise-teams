---
import type { ComponentProps } from "astro/types";

import { getImage } from "astro:assets";
import { getCollection, getEntry } from "astro:content";

import type { TeamCode } from "../content/utils";

import SurprisesByTeamChart from "../components/charts/surprises-by-team";
import SurprisesPerSeasonChart from "../components/charts/surprises-per-season";
import TeamSeasonScatterPlot from "../components/charts/team-season-scatter";
import Link from "../components/link.astro";
import Logo from "../components/logo.astro";
import Popover from "../components/popover";
import Table from "../components/table.astro";
import * as ContentUtils from "../content/utils";
import Subpage from "../layouts/subpage.astro";
import * as Utils from "../utils";

/*
  Work here is intentionally sub-optimal and verbose. Given this page is entirely pre-rendered, performance
  is of minimal concern, prioritized clearer organization and readability over efficiency
*/

const archivedSeasons = await ContentUtils.getArchivedSeasons();
const latestSeason = archivedSeasons[0];

if (!latestSeason) {
  throw new Error("insufficient season data for stats");
}

const games = await getCollection("games"); // querying games over and over was a nasty bottleneck, hence lifting up
const teamSeasons = await getCollection("teamSeasons");

/* All-time Top 10 Table */

const paceArchive = [];
for (const teamSeason of teamSeasons) {
  const gamesPlayed = games.filter(({ data }) => {
    return (
      data.seasonId === teamSeason.data.season.id &&
      data.teams.map(({ teamId }) => teamId).includes(teamSeason.data.team.id)
    );
  });
  const record = ContentUtils.calculateTeamRecord(
    teamSeason.data.team.id,
    gamesPlayed.map((g) => g.data),
  );

  paceArchive.push({
    pace: await ContentUtils.pace(teamSeason, record),
    record,
    teamSeason,
  });
}

const paceTop10 = paceArchive.toSorted((a, b) => b.pace - a.pace).slice(0, 10);
const tableRows = [];
for (const paceEntry of paceTop10) {
  const team = await getEntry(paceEntry.teamSeason.data.team);

  const img = await getImage({
    src: ContentUtils.getTeamSeasonLogo(
      team,
      paceEntry.teamSeason.data.season.id,
    ),
  });

  tableRows.push({
    isSurpriseTeam: await ContentUtils.isSurprise(
      paceEntry.teamSeason,
      paceEntry.record,
    ),
    logoSrc: img.src,
    pace: paceEntry.pace,
    seasonRange: ContentUtils.abbreviateSeasonRange(
      await getEntry(paceEntry.teamSeason.data.season),
      {
        compact: true,
      },
    ),
    team,
    teamName: ContentUtils.resolveTeamName(
      team,
      paceEntry.teamSeason.data.season.id,
    ),
    teamSeason: paceEntry.teamSeason,
  });
}

/* END All-time Top 10 Table */

/* Surprises per Season chart */

const surprisesPerSeason: ComponentProps<
  typeof SurprisesPerSeasonChart
>["data"] = [];

const seasons = await getCollection("seasons");

for (const season of seasons) {
  const gamesInSeason = games.filter(({ data }) => {
    return data.seasonId === season.id;
  });

  const teamSeasonsInSeason = teamSeasons.filter(({ data }) => {
    return data.season.id === season.id;
  });

  const datapoint = {
    numSurprises: 0,
    seasonId: season.id,
    seasonRange: ContentUtils.abbreviateSeasonRange(season, {
      compact: true,
    }),
    // TODO Why does this need to be typed? Why is it initialized to never[]?
    surpriseTeams: [] as ComponentProps<
      typeof SurprisesPerSeasonChart
    >["data"][number]["surpriseTeams"],
  };

  for (const teamSeason of teamSeasonsInSeason) {
    const record = ContentUtils.calculateTeamRecord(
      teamSeason.data.team.id,
      gamesInSeason.map((game) => game.data),
    );
    const isSurpriseTeam = await ContentUtils.isSurprise(teamSeason, record);
    if (isSurpriseTeam) {
      const team = await getEntry(teamSeason.data.team);

      const img = await getImage({
        src: ContentUtils.getTeamSeasonLogo(team, teamSeason.data.season.id),
      });

      datapoint.numSurprises += 1;
      datapoint.surpriseTeams.push({
        logoSrc: img.src,
        name: ContentUtils.resolveTeamName(team, team.id),
        teamId: teamSeason.data.team.id as TeamCode,
      });
    }
  }

  datapoint.surpriseTeams.sort((a, b) => a.name.localeCompare(b.name));

  surprisesPerSeason.push(datapoint);
}

/* END Surprises per Season chart */

/* Surprises by Team chart */

const surprisesByTeam: ComponentProps<typeof SurprisesByTeamChart>["data"] = [];
const teams = await getCollection("teams");

for (const team of teams) {
  const teamHistory = await ContentUtils.getTeamHistory(team.data.id);

  if (teamHistory) {
    const histResolvedLogos = [];

    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const currentTeamId = teamHistory.at(-1)!.teamId;
    const teamIds = new Set<TeamCode>([]);

    if (surprisesByTeam.some((point) => point.teamId === currentTeamId)) {
      continue;
    }

    for (const hist of teamHistory) {
      teamIds.add(hist.teamId);
      const { logo, ...keep } = hist;
      const img = await getImage({
        src: Utils.getEmoji(logo),
      });
      histResolvedLogos.push({
        ...keep,
        logoSrc: img.src,
      });
    }

    const datapoint: (typeof surprisesByTeam)[number] = {
      // @ts-expect-error: Don't feel like wrestling with TS here
      history: histResolvedLogos,
      name: team.data.name,
      numEliminated: 0,
      numSurprised: 0,
      teamId: currentTeamId,
    };

    const seasonsByTeam = teamSeasons.filter(({ data }) => {
      return teamIds.has(data.team.id);
    });

    for (const teamSeason of seasonsByTeam) {
      // calculateTeamRecord also filters input games by specified team;
      // could have repeated here, but not strictly necessary
      const gamesInSeason = games.filter(({ data }) => {
        return data.seasonId === teamSeason.data.season.id;
      });

      const record = ContentUtils.calculateTeamRecord(
        teamSeason.data.team.id,
        gamesInSeason.map((game) => game.data),
      );
      const isSurpriseTeam = await ContentUtils.isSurprise(teamSeason, record);
      if (isSurpriseTeam) {
        datapoint.numSurprised += 1;
      } else {
        datapoint.numEliminated += 1;
      }
    }

    surprisesByTeam.push(datapoint);
  } else {
    const img = await getImage({
      src: ContentUtils.getTeamLogo(team.data.id),
    });

    const datapoint: (typeof surprisesByTeam)[number] = {
      logoSrc: img.src,
      name: team.data.name,
      numEliminated: 0,
      numSurprised: 0,
      teamId: team.data.id,
    };

    const seasonsByTeam = teamSeasons.filter(({ data }) => {
      return data.team.id === team.id;
    });

    for (const teamSeason of seasonsByTeam) {
      // calculateTeamRecord also filters input games by specified team;
      // could have repeated here, but not strictly necessary
      const gamesInSeason = games.filter(({ data }) => {
        return data.seasonId === teamSeason.data.season.id;
      });

      const record = ContentUtils.calculateTeamRecord(
        teamSeason.data.team.id,
        gamesInSeason.map((game) => game.data),
      );
      const isSurpriseTeam = await ContentUtils.isSurprise(teamSeason, record);
      if (isSurpriseTeam) {
        datapoint.numSurprised += 1;
      } else {
        datapoint.numEliminated += 1;
      }
    }

    surprisesByTeam.push(datapoint);
  }
}

/* END Surprises by Team chart */

/* Team Season scatterplot */

const scatterPoints: ComponentProps<typeof TeamSeasonScatterPlot>["data"] = [];

for (const teamSeason of teamSeasons) {
  // calculateTeamRecord also filters input games by specified team;
  // could have repeated here, but not strictly necessary
  const gamesInSeason = games.filter(({ data }) => {
    return data.seasonId === teamSeason.data.season.id;
  });

  const record = ContentUtils.calculateTeamRecord(
    teamSeason.data.team.id,
    gamesInSeason.map((game) => game.data),
  );
  const isSurpriseTeam = await ContentUtils.isSurprise(teamSeason, record);
  const team = await getEntry(teamSeason.data.team);
  const img = await getImage({
    src: ContentUtils.getTeamSeasonLogo(team, teamSeason.data.season.id),
  });

  scatterPoints.push({
    isSurpriseTeam,
    logoSrc: img.src,
    overUnder: teamSeason.data.overUnder,
    pace: await ContentUtils.pace(teamSeason, record),
    recordFmt: ContentUtils.formatRecord(record),
    seasonRange: ContentUtils.abbreviateSeasonRange(
      await getEntry(teamSeason.data.season),
      { compact: true },
    ),
    teamName: ContentUtils.resolveTeamName(team, teamSeason.data.season.id),
  });
}

/* END Team Season scatterplot */
---

<script>
  // Enlarge table contents while in non-mobile, single-column layout

  const mediaQueryList = globalThis.matchMedia(
    "(min-width: 640px) and (max-width: 1279px)",
  );

  function handleOrientationChange(ev: MediaQueryList | MediaQueryListEvent) {
    const table = document.querySelector("#top-10");
    if (ev.matches) {
      table?.classList.remove("compact");
    } else {
      table?.classList.add("compact");
    }
  }

  handleOrientationChange(mediaQueryList);
  mediaQueryList.addEventListener("change", handleOrientationChange);
</script>

<Subpage
  description="Stats and insights from surprise team history"
  title="Stats"
>
  <h1 class="font-title text-center text-2xl text-lime-400 md:text-4xl">
    Stats
  </h1>
  <div class="mt-16 grid gap-24 px-4 xl:grid-cols-2">
    <section class="order-2 xl:order-1">
      <h2 class="font-title mb-8 text-center text-lg text-lime-400 md:text-xl">
        Surprises x Season
      </h2>
      <SurprisesPerSeasonChart
        client:load
        data={surprisesPerSeason}
        latestSeasonYear={Number.parseInt(latestSeason.id, 10)}
      />
    </section>

    <section class="order-1 max-md:-mx-4 xl:order-2">
      <h2 class="font-title mb-8 text-center text-lg text-lime-400 md:text-xl">
        All-Time Top 10
      </h2>
      <Table class="w-full" id="top-10">
        <Fragment slot="head">
          <tr>
            <td class="w-1/2"></td>
            <th class="md:w-1/3" scope="col">
              <span class="md:hidden">O/U</span>
              <span class="hidden md:inline">Over/Under</span>
            </th>
            <th class="relative text-right" scope="col">
              Pace
              <Popover client:load>
                <p class="mb-1 font-bold underline">Pace</p>
                <p>
                  Current Projected Wins - Wins needed to surprise (x (10 for
                  standard-length seasons) wins above a team's preseason
                  over/under (rounded up))
                </p>
              </Popover>
            </th>
          </tr>
        </Fragment>
        <Fragment slot="body">
          {
            tableRows.map((row) => {
              return (
                <tr>
                  <th scope="row">
                    <div class="flex flex-row items-center gap-4">
                      <Logo
                        loading="eager"
                        seasonId={row.teamSeason.data.season.id}
                        team={row.team}
                      />
                      <Link
                        class="relative"
                        href={`/${row.teamSeason.data.season.id}/${row.team.id}`}
                      >
                        <span class="hidden md:inline">
                          {row.teamName}
                          {row.seasonRange}
                        </span>
                        <span class="md:hidden">
                          {row.team.id}
                          {row.seasonRange}
                        </span>
                      </Link>
                    </div>
                  </th>
                  <td class="text-right">{row.teamSeason.data.overUnder}</td>
                  <td class="text-right">
                    {Utils.signedFormatter.format(row.pace)}{" "}
                  </td>
                </tr>
              );
            })
          }
        </Fragment>
      </Table>
    </section>

    <section class="order-3">
      <h2 class="font-title mb-8 text-center text-lg text-lime-400 md:text-xl">
        Surprises x Teams
      </h2>
      <SurprisesByTeamChart client:visible data={surprisesByTeam} />
    </section>

    <section class="order-4">
      <h2 class="font-title mb-8 text-center text-lg text-lime-400 md:text-xl">
        Pace x Over/Under
      </h2>
      <TeamSeasonScatterPlot client:visible data={scatterPoints} />
    </section>
  </div>
</Subpage>
